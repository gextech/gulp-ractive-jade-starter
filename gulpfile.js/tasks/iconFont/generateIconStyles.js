var gulp         = require('gulp');
var config       = require('../../config/iconFont');
var swig         = require('gulp-swig');
var rename       = require('gulp-rename');
var handleErrors = require('../../lib/handleErrors');
var merge        = require('merge-stream');
var util         = require('gulp-util');

module.exports = function(codepoints, options) {

	var processTemplateStream = function(data, name) {

		util.log("Generating " + name + " iconFont file");

		var template = data.template,
				outputName = data.outputName;
				outputDir = data.outputDir || config.extendedCssDest;

		return gulp.src(template)
			.pipe(swig({
				data: {
					icons: codepoints.map(function(icon) {
						return {
							name: icon.name,
							code: icon.codepoint.toString(16)
						}
					}),

					fontName: config.options.fontName,
					fontPath: config.fontPath,
					className: config.className,
					comment: 'DO NOT EDIT DIRECTLY!\n// Generated by gulp/tasks/iconFont.js\n// from ' + template
				}
			}))
			.on('error', handleErrors)
			.pipe(rename(outputName))
			.pipe(gulp.dest(outputDir));
	};

	var templateStreams = [];
	for(var f in config.formats) {
		templateStreams.push(processTemplateStream(config.formats[f], f.toUpperCase()));
	}
	return merge(templateStreams);
};
